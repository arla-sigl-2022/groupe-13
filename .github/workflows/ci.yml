# This is a basic workflow to help you get started with Actions

name: CI on pull requests

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  pull_request: 
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  unit-test-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Install backend dependencies
        working-directory: backend
        run: npm install
      - name: Run unit tests
        working-directory: backend
        run: npm test

  build-ci-frontend:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: unit-test-backend

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: build and publish frontend docker image
        working-directory: frontend
        run: | 
          docker build -t docker.pkg.github.com/arla-sigl-2022/groupe-13/ci-garlaxy:${{ github.sha }} -f Dockerfile.ci .
          docker login docker.pkg.github.com -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push docker.pkg.github.com/arla-sigl-2022/groupe-13/ci-garlaxy:${{ github.sha }}

      - name: Deploy on production VM
        uses: appleboy/ssh-action@master
        env:
          TAG: ${{ github.sha }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: TAG
          script: |
            echo "image tag to be release: $TAG"
            docker login docker.pkg.github.com -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker pull docker.pkg.github.com/arla-sigl-2022/groupe-13/ci-garlaxy:$TAG
            (docker stop ci-garlaxy && docker rm ci-garlaxy) || echo "Nothing to stop"
            docker run -d --name ci-garlaxy --network web --label traefik.enable=true --label traefik.docker.network=web --label traefik.frontend.rule=Host:ci.groupe13.arla-sigl.fr --label traefik.frontend.port=80 docker.pkg.github.com/arla-sigl-2022/groupe-13/ci-garlaxy:$TAG
  build-ci-backend:
    runs-on: ubuntu-latest
    needs: unit-test-backend
    steps:
      - uses: actions/checkout@v2
      - name: setup .env with github secrets for database
        working-directory: backend
        run: |
          cat <<EOF > .env
            RDB_HOST=${{ secrets.CI_RDB_HOST }}
            RDB_PORT=${{ secrets.CI_RDB_PORT }}
            RDB_DATABASE=${{ secrets.CI_RDB_DATABASE }}
            RDB_USER=${{ secrets.CI_RDB_USER }}
            RDB_PASSWORD=${{ secrets.CI_RDB_PASSWORD }}
            DDB_HOST=${{ secrets.CI_DDB_HOST }}
            DDB_PORT=${{ secrets.CI_DDB_PORT }}
            DDB_USER=${{ secrets.CI_DDB_USER }}
            DDB_DATABASE=${{ secrets.CI_DDB_DATABASE }}
            DDB_PASSWORD=${{ secrets.CI_DDB_PASSWORD }}
            DDB_AUTH_SOURCE=${{ secrets.CI_DDB_AUTH_SOURCE }}
          EOF
      - name: build and publish backend docker image
        working-directory: backend
        run: |
          docker build -t docker.pkg.github.com/arla-sigl-2022/groupe-13/ci-garlaxy-web-api:${{ github.sha }} .
          docker login docker.pkg.github.com -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push docker.pkg.github.com/arla-sigl-2022/groupe-13/ci-garlaxy-web-api:${{ github.sha }} 
      - name: Deploy on production VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            docker login docker.pkg.github.com -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker pull docker.pkg.github.com/arla-sigl-2022/groupe-13/ci-garlaxy-web-api:${{ github.sha }}
            (docker stop ci-garlaxy-web-api && docker rm ci-garlaxy-web-api) || echo "Nothing to stop"
            docker run -d --name ci-garlaxy-web-api --init --network web --label traefik.enable=true --label traefik.docker.network=web --label traefik.frontend.rule=Host:ci.api.groupe13.arla-sigl.fr --label traefik.frontend.port=3030 docker.pkg.github.com/arla-sigl-2022/groupe-13/ci-garlaxy-web-api:${{ github.sha }}
  functional-test:
    runs-on: ubuntu-latest
    needs: build-ci-backend
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: setup .env with auth0 secrets
        working-directory: cucumber
        run: |
          cat <<EOF > .env
            AUTH0_CLIENT_ID=${{ secrets.AUTH0_CLIENT_ID}}
            AUTH0_CLIENT_SECRET=${{ secrets.AUTH0_CLIENT_SECRET}}
            AUTH0_TOKEN_URL=${{ secrets.AUTH0_TOKEN_URL}}
            AUTH0_AUDIENCE=${{ secrets.AUTH0_AUDIENCE}}
            API_URL=https://ci.api.groupe13.arla-sigl.fr
          EOF
      - name: install cucumber dependencies
        working-directory: cucumber
        run: npm install
      - name: Run cucumber test
        working-directory: cucumber
        run: npm test
  
  e2e-test:
    runs-on: ubuntu-latest
    needs: 
      - build-ci-backend
      - build-ci-frontend
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: install cypress dependencies
        working-directory: e2e
        run: npm install
      - name: Run cypress test
        working-directory: e2e
        run: npm run cypress:ci
